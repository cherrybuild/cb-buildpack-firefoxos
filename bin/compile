#!/bin/bash

# fail fast
set -o errexit
# cannot use 'set -o nounset' because of build/envsetup.sh below
set -o pipefail

indent() {
  sed -u 's/^/       /'
}

scriptname=$(basename $0)
case $# in
  2) :;;
  *) echo "$scriptname: usage: $scriptname BUILD_DIR CACHE_DIR" >&2; exit 2;;
esac

build_dir="$1"
cache_dir="$2"
backup_base_url=https://cb-misc.s3.amazonaws.com/b2g
ccache_max_size=50G
num_cpu=$(grep -c ^bogomips /proc/cpuinfo)

. $build_dir/.config

VARIANT=${VARIANT:-user}
LUNCH=${LUNCH:-full_${DEVICE}-${VARIANT}}

export GECKO_PATH
export GAIA_PATH
export GAIA_DOMAIN
export GAIA_PORT
export GAIA_DEBUG
export GECKO_OBJDIR
export B2G_NOOPT
export B2G_DEBUG
export MOZ_CHROME_MULTILOCALE
export L10NBASEDIR
export USE_CCACHE=1
export CCACHE_DIR=$cache_dir/ccache
export WGET_OPTS='-c -q'
export PATH=$build_dir/build/fake-jdk-tools/bin:$PATH

ccache -M $ccache_max_size
ccache -z
# ccache 2.x doesn't create this file, which CB uses as a marker
touch $CCACHE_DIR/CACHEDIR.TAG

cd $build_dir >/dev/null 2>&1

echo "-----> Sourcing build/envsetup.sh" >&2
. build/envsetup.sh

echo "-----> Running lunch $LUNCH" >&2
lunch $LUNCH 2>&1 | indent

if [ -f "$build_dir"/device/*/$DEVICE/download-blobs.sh ]
then
  echo "-----> Downloading blobs for device: $DEVICE" >&2
  cd $build_dir/device/*/$DEVICE >/dev/null 2>&1
  ./download-blobs.sh
  cd - >/dev/null 2>&1
elif [ -f device/*/$DEVICE/extract-files.sh ]
then
  echo "-----> Extracting files for device: $DEVICE" >&2
  backup_url=$backup_base_url/backup-$DEVICE.tar.xz
  backup_tarball=$cache_dir/backup-$DEVICE.tar.xz
  if [ ! -f $cache_dir/backup-$DEVICE.tar.xz ]
  then
    echo "       Downloading: $backup_url" >&2
    curl -fsLS -o $backup_tarball.new $backup_url 2>&1 | indent
    mv $backup_tarball.new $backup_tarball
  fi
  echo "       Unpacking: $backup_tarball" >&2
  tar -C $build_dir -xf $backup_tarball 2>&1 | indent
  cd $build_dir/device/*/$DEVICE >/dev/null 2>&1
  ./extract-files.sh 2>&1 | indent
  cd - >/dev/null 2>&1
fi

echo "-----> Running make" >&2
make -j $num_cpu 2>&1 | indent

for img in out/target/product/*/system.img
do
  name=$(echo $img | awk -F/ '{print $4}')
  echo "-----> Creating system-$name.zip" >&2
  zip -yrj1 out/system-$name.zip $img 2>&1 | indent
done

cd - >/dev/null 2>&1
